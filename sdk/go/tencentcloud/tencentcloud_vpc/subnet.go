// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package tencentcloud_vpc

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provide a resource to create a VPC subnet.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-tencentcloud/blob/master/website/docs/r/subnet.html.markdown.
type Subnet struct {
	s *pulumi.ResourceState
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	if args == nil || args.AvailabilityZone == nil {
		return nil, errors.New("missing required argument 'AvailabilityZone'")
	}
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["availabilityZone"] = nil
		inputs["cidrBlock"] = nil
		inputs["isMulticast"] = nil
		inputs["name"] = nil
		inputs["routeTableId"] = nil
		inputs["tags"] = nil
		inputs["vpcId"] = nil
	} else {
		inputs["availabilityZone"] = args.AvailabilityZone
		inputs["cidrBlock"] = args.CidrBlock
		inputs["isMulticast"] = args.IsMulticast
		inputs["name"] = args.Name
		inputs["routeTableId"] = args.RouteTableId
		inputs["tags"] = args.Tags
		inputs["vpcId"] = args.VpcId
	}
	inputs["availableIpCount"] = nil
	inputs["createTime"] = nil
	inputs["isDefault"] = nil
	s, err := ctx.RegisterResource("tencentcloud:tencentcloud_vpc/subnet:Subnet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubnetState, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["availableIpCount"] = state.AvailableIpCount
		inputs["cidrBlock"] = state.CidrBlock
		inputs["createTime"] = state.CreateTime
		inputs["isDefault"] = state.IsDefault
		inputs["isMulticast"] = state.IsMulticast
		inputs["name"] = state.Name
		inputs["routeTableId"] = state.RouteTableId
		inputs["tags"] = state.Tags
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("tencentcloud:tencentcloud_vpc/subnet:Subnet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Subnet) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Subnet) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The availability zone within which the subnet should be created.
func (r *Subnet) AvailabilityZone() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["availabilityZone"])
}

// The number of available IPs.
func (r *Subnet) AvailableIpCount() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["availableIpCount"])
}

// A network address block of the subnet.
func (r *Subnet) CidrBlock() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cidrBlock"])
}

// Creation time of subnet resource.
func (r *Subnet) CreateTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["createTime"])
}

// Indicates whether it is the default VPC for this region.
func (r *Subnet) IsDefault() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["isDefault"])
}

// Indicates whether multicast is enabled. The default value is 'true'.
func (r *Subnet) IsMulticast() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["isMulticast"])
}

// The name of subnet to be created.
func (r *Subnet) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// ID of a routing table to which the subnet should be associated.
func (r *Subnet) RouteTableId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["routeTableId"])
}

// Tags of the subnet.
func (r *Subnet) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// ID of the VPC to be associated.
func (r *Subnet) VpcId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering Subnet resources.
type SubnetState struct {
	// The availability zone within which the subnet should be created.
	AvailabilityZone interface{}
	// The number of available IPs.
	AvailableIpCount interface{}
	// A network address block of the subnet.
	CidrBlock interface{}
	// Creation time of subnet resource.
	CreateTime interface{}
	// Indicates whether it is the default VPC for this region.
	IsDefault interface{}
	// Indicates whether multicast is enabled. The default value is 'true'.
	IsMulticast interface{}
	// The name of subnet to be created.
	Name interface{}
	// ID of a routing table to which the subnet should be associated.
	RouteTableId interface{}
	// Tags of the subnet.
	Tags interface{}
	// ID of the VPC to be associated.
	VpcId interface{}
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// The availability zone within which the subnet should be created.
	AvailabilityZone interface{}
	// A network address block of the subnet.
	CidrBlock interface{}
	// Indicates whether multicast is enabled. The default value is 'true'.
	IsMulticast interface{}
	// The name of subnet to be created.
	Name interface{}
	// ID of a routing table to which the subnet should be associated.
	RouteTableId interface{}
	// Tags of the subnet.
	Tags interface{}
	// ID of the VPC to be associated.
	VpcId interface{}
}
